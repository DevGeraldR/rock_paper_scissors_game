/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.game.rock_paper_scissors_game;

import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author Dev Gerald
 */
public class GamePlay extends javax.swing.JFrame {

    /**
     * Creates new form GamePlay
     */
    public GamePlay() {
        initComponents();
    }
    
    // Variable Declaration
    Random rand = new Random(); // To generate random number use to select computers card
    String[] computerCards = {"Rock", "Paper", "Scissor"}; // To store all posible attack of the computer
    String computerAttack; // To store the attack of the computer
    String playerAttack; // To store the players attack
    int playerScore; // To store the players score
    int computerScore; // To store the computer score
    int tieCount; // To store the number of ties
    int round = 1; // To store the number of round

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title2Panel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        title1Panel = new javax.swing.JPanel();
        numberTitleLabel = new javax.swing.JLabel();
        gameplayPanel = new javax.swing.JPanel();
        resultTextField = new javax.swing.JTextField();
        roundTitleLabel = new javax.swing.JLabel();
        roundLabel = new javax.swing.JLabel();
        playButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cardsOverviewTextField = new javax.swing.JTextField();
        attackTextField = new javax.swing.JTextField();
        showResultButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rock, Paper and Scrissors Game");
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);

        title2Panel.setBackground(new java.awt.Color(204, 204, 204));

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        titleLabel.setText("Rock, Paper and Scissors Game");

        descriptionLabel.setText("Play rock, paper and scissors game for 10 rounds");

        javax.swing.GroupLayout title2PanelLayout = new javax.swing.GroupLayout(title2Panel);
        title2Panel.setLayout(title2PanelLayout);
        title2PanelLayout.setHorizontalGroup(
            title2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(title2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(title2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        title2PanelLayout.setVerticalGroup(
            title2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(title2PanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        title1Panel.setBackground(new java.awt.Color(204, 255, 204));

        numberTitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        numberTitleLabel.setText("1-10");

        javax.swing.GroupLayout title1PanelLayout = new javax.swing.GroupLayout(title1Panel);
        title1Panel.setLayout(title1PanelLayout);
        title1PanelLayout.setHorizontalGroup(
            title1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(title1PanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(numberTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );
        title1PanelLayout.setVerticalGroup(
            title1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(title1PanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(numberTitleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gameplayPanel.setBackground(new java.awt.Color(255, 255, 255));

        resultTextField.setEditable(false);
        resultTextField.setBackground(new java.awt.Color(204, 255, 204));
        resultTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        resultTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        resultTextField.setText("Game Result");
        resultTextField.setFocusable(false);

        roundTitleLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        roundTitleLabel.setText("Round");

        roundLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        roundLabel.setText("1");

        playButton.setText("Play");
        playButton.setEnabled(false);
        playButton.setFocusable(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Attack here");

        cardsOverviewTextField.setEditable(false);
        cardsOverviewTextField.setBackground(new java.awt.Color(204, 204, 204));
        cardsOverviewTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cardsOverviewTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cardsOverviewTextField.setText("Enter your answer below!");
        cardsOverviewTextField.setToolTipText("");
        cardsOverviewTextField.setFocusable(false);

        attackTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                attackTextFieldKeyReleased(evt);
            }
        });

        showResultButton.setText("Show Final Result");
        showResultButton.setEnabled(false);
        showResultButton.setFocusable(false);
        showResultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showResultButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gameplayPanelLayout = new javax.swing.GroupLayout(gameplayPanel);
        gameplayPanel.setLayout(gameplayPanelLayout);
        gameplayPanelLayout.setHorizontalGroup(
            gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameplayPanelLayout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addGroup(gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(showResultButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(attackTextField))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(gameplayPanelLayout.createSequentialGroup()
                .addGroup(gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gameplayPanelLayout.createSequentialGroup()
                        .addGap(251, 251, 251)
                        .addComponent(jLabel1))
                    .addGroup(gameplayPanelLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(cardsOverviewTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gameplayPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gameplayPanelLayout.createSequentialGroup()
                        .addComponent(roundTitleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roundLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(228, 228, 228))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gameplayPanelLayout.createSequentialGroup()
                        .addComponent(resultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(166, 166, 166))))
        );
        gameplayPanelLayout.setVerticalGroup(
            gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roundLabel)
                    .addComponent(roundTitleLabel))
                .addGap(12, 12, 12)
                .addComponent(resultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardsOverviewTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(attackTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showResultButton)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(title1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(title2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(gameplayPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(title1Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(title2Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(gameplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        // This will generate a random number from 0 - 2
        // This is use to select the computers attack
        int dice = rand.nextInt(3);
        
        // After we get the random number we will assign that number as an index in our array of
        // possible attacks and get the choosen attack base on the dice number.
        computerAttack = computerCards[dice];
        
        // To get the first and second letter of player's attack and convert it to uppercase
        playerAttack = attackTextField.getText().substring(0,2).toUpperCase();
        
        // This one to check if the player inputed the correct attack and convert it to the format same to the computers attack
        // If not valid means that the player input first and second letter doesn't match any of the possible attack
        // Assign Invalid to the playerCard
        switch (playerAttack) {
            case "RO" -> playerAttack = "Rock";
            case "PA" -> playerAttack = "Paper";
            case "SC" -> playerAttack = "Scissor";
            default -> playerAttack = "Invalid";
        }
        
        // To check who wins
        // This is to check if a TIE 
        // The playar attack is equals to the computer attack
        if(playerAttack.equals(computerAttack)){
            // To set the result to TIE
            resultTextField.setText("TIE");
            //To add to the number of ties
            tieCount++; 
        } else if(playerAttack.equals("Rock")){ // If the player attack is Rock
            // Check if the computer attack is Scissor
            if(computerAttack.equals("Scissor")){
                // If so then the player wins
                // To display the result
                resultTextField.setText("YOU WIN");
                // To add score to the player
                playerScore++;
            } else { // If the computer attack is not Scissors or Rock then it is Paper
                // It means the player lose
                // To set the result
                resultTextField.setText("YOU LOSE");
                // To add to the computers score
                computerScore++;
            }
        } else if(playerAttack.equals("Paper")){ // If the player attack is Paper
            // Check if the computer attack is Rock
            if(computerAttack.equals("Rock")){
                // If so then the player's win
                // To set the result
                resultTextField.setText("YOU WIN");
                // To add to the player score
                playerScore++;
            } else {
                // If the computers attack is not Paper or Rock it means it is Scissor
                // Meaning the player lose
                // This is to set the result
                resultTextField.setText("YOU LOSE");
                // To add to the computer score
                computerScore++;
            }
        } else if(playerAttack.equals("Scissor")){ // If the players attack is Scissor
            //Check if the computer attack is Paper
            if(computerAttack.equals("Paper")){
                // If so then the player wins
                // To set the result
                resultTextField.setText("YOU WIN");
                // To add the score to the player
                playerScore++;
            } else {
                // If the computer attack is not Scissor or paper then it is Rock
                // It means the player lose
                // To set the result
                resultTextField.setText("YOU LOSE");
                // To add to the computers score
                computerScore++;
            }
        } else { // This case is when the player inputed an Invalid attack
            resultTextField.setText("INVALID ATTACK");
        }
        
        // This one is to display the game result when the player's click play
        // First we need to check if the player attack is valid
        if(playerAttack.equals("Invalid")){
            // If not then repromp the user to input again
            cardsOverviewTextField.setText("Please input correct attack");
        } else {
            // If valid then display the attack of the player and computer
            cardsOverviewTextField.setText(playerAttack + " VS " + computerAttack);
            // To add to the round
            round++;
            
            // To set the round
            if(round <= 10)
                roundLabel.setText(String.valueOf(round));
        }
        
        // To clear the attack text field
        attackTextField.setText("");       
        // To set the play button to disabled
        playButton.setEnabled(false);
        
        // This one is for the game overview or the final result if the players reaches round 10
        if(round > 10){
            // Set the button to display the final result to enabled
            showResultButton.setEnabled(true);
            // To set the answer textfield to disabled
            attackTextField.setEnabled(false);
        }
        
    }//GEN-LAST:event_playButtonActionPerformed

    // This enable the play button when the player's answer reaches 2 letters
    private void attackTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_attackTextFieldKeyReleased
        // Check if the players answer length is greater than 1
        if(attackTextField.getText().length()>1){
           // If so then set the play button to enabled
           playButton.setEnabled(true);
        } else {
           // If not the disable the play button
           playButton.setEnabled(false);
        }
    }//GEN-LAST:event_attackTextFieldKeyReleased

    // This one is use when the player clicked the show result button
    private void showResultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showResultButtonActionPerformed
        // Display the number of times the player won, lose and tie
        JOptionPane.showMessageDialog(null, "Player Score: "  + playerScore + "\nComputer Score: " + computerScore + "\nTie: " + tieCount, "Final Game Result", JOptionPane.PLAIN_MESSAGE);
        // To close the program when player selected ok or x button
        this.dispose();
    }//GEN-LAST:event_showResultButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GamePlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GamePlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GamePlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GamePlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GamePlay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField attackTextField;
    private javax.swing.JTextField cardsOverviewTextField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JPanel gameplayPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel numberTitleLabel;
    private javax.swing.JButton playButton;
    private javax.swing.JTextField resultTextField;
    private javax.swing.JLabel roundLabel;
    private javax.swing.JLabel roundTitleLabel;
    private javax.swing.JButton showResultButton;
    private javax.swing.JPanel title1Panel;
    private javax.swing.JPanel title2Panel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
